{
	"Parameters": {
		"KeyName": {
			"Description": "Name of an existing EC2 KeyPair to enable SSH access to the instance",
			"Type": "AWS::EC2::KeyPair::KeyName",
			"ConstraintDescription": "must be the name of an existing EC2 KeyPair."
		},
		"DBName": {
			"Default": "MyDatabase",
			"Description": "MySQL database name",
			"Type": "String",
			"MinLength": "1",
			"MaxLength": "64",
			"AllowedPattern": "[a-zA-Z][a-zA-Z0-9]*",
			"ConstraintDescription": "must begin with a letter and contain only alphanumeric characters."
		},
		"DBUser": {
			"NoEcho": "true",
			"Description": "Username for MySQL database access (novus)",
      "Type": "String",
      "Default": "novus",
			"MinLength": "1",
			"MaxLength": "16",
			"AllowedPattern": "[a-zA-Z][a-zA-Z0-9]*",
			"ConstraintDescription": "must begin with a letter and contain only alphanumeric characters."
		},
		"DBPassword": {
      "NoEcho": "true",
      "Default": "Pa55w0rd",
			"Description": "Password for MySQL database access (Pa55w0rd)",
			"Type": "String",
			"MinLength": "1",
			"MaxLength": "41",
			"AllowedPattern": "[a-zA-Z0-9]*",
			"ConstraintDescription": "must contain only alphanumeric characters."
		},
		"DBRootPassword": {
			"NoEcho": "true",
      "Description": "Root password for MySQL (Pa55w0rd)",
      "Default": "Pa55w0rd",
			"Type": "String",
			"MinLength": "1",
			"MaxLength": "41",
			"AllowedPattern": "[a-zA-Z0-9]*",
			"ConstraintDescription": "must contain only alphanumeric characters."
		},
		"InstanceType": {
			"Description": "WebServer EC2 instance type",
			"Type": "String",
			"Default": "t2.micro",
			"AllowedValues": [
				"t2.micro"
			],
			"ConstraintDescription": "must be a valid EC2 instance type."
		}
  },
  
	"Mappings": {
		"AWSInstanceType2Arch": {
			"t2.micro": {
				"Arch": "HVM64"
			}
		},
		"AWSInstanceType2NATArch": {
			"t2.micro": {
				"Arch": "NATHVM64"
			}
		},
		"AWSRegionArch2AMI": {
			"us-east-1": {
				"HVM64": "ami-0ff8a91507f77f867",
				"HVMG2": "ami-0a584ac55a7631c0c"
			}
		}
  },
  
	"Resources": {
		"WebServerInstance": {
			"Type": "AWS::EC2::Instance",
			"Metadata": {
				"AWS::CloudFormation::Init": {
					"configSets": {
						"InstallAndRun": [
							"Install",
							"Configure"
						]
					},
					"Install": {
						"packages": {
							"yum": {
								"mysql": [],
								"mysql-server": [],
								"mysql-libs": [],
								"nginx": [],
								"python36": [],
								"python36-devel": [],
								"python36-libs": [],
								"python36-tools": [],
								"gcc": [],
								"git": []
							}
						},
						"files": {
							"/usr/share/nginx/html/index.html": {
								"content": {
									"Fn::Join": [
										"",
										[
											"<html>\n",
											"  <head>\n",
											"    <title>AWS CloudFormation PHP Sample</title>\n",
											"    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=ISO-8859-1\">\n",
											"  </head>\n",
											"  <body>\n",
											"    <h1>Hello world</h1>\n",
											"    <p/>\n",
											"  </body>\n",
											"</html>\n"
										]
									]
								},
								"mode": "000777",
								"owner": "root",
								"group": "root"
							},
							"/tmp/nginx/default.conf": {
								"content": {
									"Fn::Join": [
										"",
										[
											"server {\n",
											"listen 80;\n",
											"root /usr/share/nginx/html;\n",
											"charset utf-8;\n",
											"location / {\n",
											"try_files $uri $uri/ =404;\n",
											"}\n",
											"}\n"
										]
									]
								},
								"mode": "000755",
								"owner": "root",
								"group": "root"
							},
							"/tmp/nginx/root.conf": {
								"content": {
									"Fn::Join": [
										"",
										[
											"user nginx;\n",
											"worker_processes auto;\n",
											"error_log /var/log/nginx/error.log;\n",
											"pid /var/run/nginx.pid;\n",
											"include /usr/share/nginx/modules/*.conf;\n",
											"events {\n",
											"worker_connections 1024;\n",
											"}\n",
											"http {\n",
											"access_log  /var/log/nginx/access.log;\n",
											"sendfile            on;\n",
											"tcp_nopush          on;\n",
											"tcp_nodelay         on;\n",
											"keepalive_timeout   65;\n",
											"types_hash_max_size 2048;\n",
											"include             /etc/nginx/mime.types;\n",
											"default_type        application/octet-stream;\n",
											"include /etc/nginx/conf.d/*.conf;\n",
											"index   index.html index.htm;\n",
											"}\n"
										]
									]
								},
								"mode": "000644",
								"owner": "root",
								"group": "root"
							},
							"/tmp/setup.mysql": {
								"content": {
									"Fn::Join": [
										"",
										[
											"CREATE DATABASE ",
											{
												"Ref": "DBName"
											},
											";\n",
											"GRANT ALL ON ",
											{
												"Ref": "DBName"
											},
											".* TO '",
											{
												"Ref": "DBUser"
											},
											"'@localhost IDENTIFIED BY '",
											{
												"Ref": "DBPassword"
											},
											"';\n"
										]
									]
								},
								"mode": "000400",
								"owner": "root",
								"group": "root"
							},
							"/etc/cfn/cfn-hup.conf": {
								"content": {
									"Fn::Join": [
										"",
										[
											"[main]\n",
											"stack=",
											{
												"Ref": "AWS::StackId"
											},
											"\n",
											"region=",
											{
												"Ref": "AWS::Region"
											},
											"\n"
										]
									]
								},
								"mode": "000400",
								"owner": "root",
								"group": "root"
							},
							"/etc/cfn/hooks.d/cfn-auto-reloader.conf": {
								"content": {
									"Fn::Join": [
										"",
										[
											"[cfn-auto-reloader-hook]\n",
											"triggers=post.update\n",
											"path=Resources.WebServerInstance.Metadata.AWS::CloudFormation::Init\n",
											"action=/opt/aws/bin/cfn-init -v ",
											"         --stack ",
											{
												"Ref": "AWS::StackName"
											},
											"         --resource WebServerInstance ",
											"         --configsets InstallAndRun ",
											"         --region ",
											{
												"Ref": "AWS::Region"
											},
											"\n",
											"runas=root\n"
										]
									]
								},
								"mode": "000400",
								"owner": "root",
								"group": "root"
							}
						},
						"services": {
							"sysvinit": {
								"mysqld": {
									"enabled": "true",
									"ensureRunning": "false"
								},
								"nginx": {
									"enabled": "true",
									"ensureRunning": "false",
									"files": [
										"/etc/nginx/conf.d/default.conf"
									]
								},
								"cfn-hup": {
									"enabled": "true",
									"ensureRunning": "false",
									"files": [
										"/etc/cfn/cfn-hup.conf",
										"/etc/cfn/hooks.d/cfn-auto-reloader.conf"
									]
								}
							}
						}
					},
					"Configure": {
						"commands": {
						}
					}
				}
			},
			"Properties": {
				"ImageId": {
					"Fn::FindInMap": [
						"AWSRegionArch2AMI",
						{
							"Ref": "AWS::Region"
						},
						{
							"Fn::FindInMap": [
								"AWSInstanceType2Arch",
								{
									"Ref": "InstanceType"
								},
								"Arch"
							]
						}
					]
				},
				"InstanceType": {
					"Ref": "InstanceType"
				},
				"SecurityGroups": [
					{
						"Ref": "WebServerSecurityGroup"
					}
				],
				"KeyName": {
					"Ref": "KeyName"
				},
				"UserData": {
					"Fn::Base64": {
						"Fn::Join": [
							"",
							[
								"#!/bin/bash -xe\n",
								"yum update -y aws-cfn-bootstrap\n",
								"adduser www-data\n",
								"# Install the files and packages from the metadata\n",
								"/opt/aws/bin/cfn-init -v ",
								"         --stack ",
								{
									"Ref": "AWS::StackName"
								},
								"         --resource WebServerInstance ",
								"         --configsets InstallAndRun ",
								"         --region ",
								{
									"Ref": "AWS::Region"
								},
								"\n",
								"pip-3.6 install uwsgi\n",
								"mkdir /tmp/test\n",
								"mkdir -p /usr/share/nginx/back\n",
								"mkdir -p /usr/share/nginx/front\n",
								"git clone https://github.com/zephirdeadline/novus_cloud_formation.git /tmp/test\n",
								"git clone https://t@github.com/corenting/NovusBack.git /usr/share/nginx/back/\n",
								"wget 'https://l4.al/f.php?h=1gIrvOSO&d=1' -O '/usr/share/nginx/front/dist.zip'\n",
								"unzip /usr/share/nginx/front/dist.zip -d /usr/share/nginx/front/\n",
								"cd /tmp/test\n",
								"chmod +x init.sh\n",
								"./init.sh\n",
								"## Nginx setup\n",
								"cp /tmp/nginx/default.conf /etc/nginx/conf.d/default.conf\n",
								"cp /tmp/nginx/root.conf /etc/nginx/nginx.conf\n",
								"/usr/local/bin/uwsgi --ini /etc/nginx/back.ini &\n",
								"service nginx restart\n",
								"# Signal the status from cfn-init\n",
								"/opt/aws/bin/cfn-signal -e $? ",
								"         --stack ",
								{
									"Ref": "AWS::StackName"
								},
								"         --resource WebServerInstance ",
								"         --region ",
								{
									"Ref": "AWS::Region"
								},
								"\n",
								"runas=root\n"
							]
						]
					}
				}
			},
			"CreationPolicy": {
				"ResourceSignal": {
					"Timeout": "PT5M"
				}
			}
		},
		"WebServerSecurityGroup": {
			"Type": "AWS::EC2::SecurityGroup",
			"Properties": {
				"GroupDescription": "Enable HTTP access via port 80",
				"SecurityGroupIngress": [
					{
						"IpProtocol": "tcp",
						"FromPort": "80",
						"ToPort": "80",
						"CidrIp": "0.0.0.0/0"
					},
					{
						"IpProtocol": "tcp",
						"FromPort": "22",
						"ToPort": "22",
						"CidrIp": "0.0.0.0/0"
					}
				]
			}
		}
	},
	"Outputs": {
		"WebsiteURL": {
			"Description": "URL for newly created server",
			"Value": {
				"Fn::Join": [
					"",
					[
						"http://",
						{
							"Fn::GetAtt": [
								"WebServerInstance",
								"PublicDnsName"
							]
						}
					]
				]
			}
		}
	}
}
