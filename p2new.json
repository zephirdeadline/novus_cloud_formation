{
	"Parameters": {
		"KeyName": {
			"Description": "Name of an existing EC2 KeyPair to enable SSH access to the instance",
			"Type": "AWS::EC2::KeyPair::KeyName",
			"ConstraintDescription": "must be the name of an existing EC2 KeyPair."
		},
		"DBName": {
			"Default": "MyDatabase",
			"Description": "MySQL database name",
			"Type": "String",
			"MinLength": "1",
			"MaxLength": "64",
			"AllowedPattern": "[a-zA-Z][a-zA-Z0-9]*",
			"ConstraintDescription": "must begin with a letter and contain only alphanumeric characters."
		},
		"DBUser": {
			"NoEcho": "true",
			"Description": "Username for MySQL database access (novus)",
      "Type": "String",
      "Default": "novus",
			"MinLength": "1",
			"MaxLength": "16",
			"AllowedPattern": "[a-zA-Z][a-zA-Z0-9]*",
			"ConstraintDescription": "must begin with a letter and contain only alphanumeric characters."
		},
		"DBPassword": {
      "NoEcho": "true",
      "Default": "Pa55w0rd",
			"Description": "Password for MySQL database access (Pa55w0rd)",
			"Type": "String",
			"MinLength": "1",
			"MaxLength": "41",
			"AllowedPattern": "[a-zA-Z0-9]*",
			"ConstraintDescription": "must contain only alphanumeric characters."
		},
		"DBRootPassword": {
			"NoEcho": "true",
      "Description": "Root password for MySQL (Pa55w0rd)",
      "Default": "Pa55w0rd",
			"Type": "String",
			"MinLength": "1",
			"MaxLength": "41",
			"AllowedPattern": "[a-zA-Z0-9]*",
			"ConstraintDescription": "must contain only alphanumeric characters."
		},
		"InstanceType": {
			"Description": "WebServer EC2 instance type",
			"Type": "String",
			"Default": "t2.micro",
			"AllowedValues": [
				"t2.micro"
			],
			"ConstraintDescription": "must be a valid EC2 instance type."
		}
  },
  
	"Mappings": {
		"AWSInstanceType2Arch": {
			"t2.micro": {
				"Arch": "HVM64"
			}
		},
		"AWSInstanceType2NATArch": {
			"t2.micro": {
				"Arch": "NATHVM64"
			}
		},
		"AWSRegionArch2AMI": {
			"us-east-1": {
				"HVM64": "ami-0ff8a91507f77f867",
				"HVMG2": "ami-0a584ac55a7631c0c"
			}
		}
  },
  
	"Resources": {
		"WebServerInstance": {
			"Type": "AWS::EC2::Instance",
			"Metadata": {
				"AWS::CloudFormation::Init": {
					"configSets": {
						"InstallAndRun": [
							"Install",
							"Configure"
						]
					},
					"Install": {
						"packages": {
							"yum": {
                "git": [],
								"mysql": [],
								"mysql-server": [],
								"mysql-libs": [],
								"nginx": [],
                "python36": [],
                "python36-devel": [],
                "python36-libs": [],
				"python36-tools": [],
				"gcc": []
                
							},
              "pip-3.6": {
                "uwsgi": []
              }
						},
						"files": {
							"/etc/cfn/hooks.d/cfn-auto-reloader.conf": {
								"content": {
									"Fn::Join": [
										"",
										[
											"[cfn-auto-reloader-hook]\n",
											"triggers=post.update\n",
											"path=Resources.WebServerInstance.Metadata.AWS::CloudFormation::Init\n",
											"action=/opt/aws/bin/cfn-init -v ",
											"         --stack ",
											{
												"Ref": "AWS::StackName"
											},
											"         --resource WebServerInstance ",
											"         --configsets InstallAndRun ",
											"         --region ",
											{
												"Ref": "AWS::Region"
											},
                      "\n",
                      "git clone https://github.com/zephirdeadline/novus_cloud_formation.git",
                      "cd novus_cloud_formation",
                      "chmod +x init.sh",
                      "./init.sh",
											"runas=root\n"
										]
									]
								},
								"mode": "000400",
								"owner": "root",
								"group": "root"
							}
						},
						"services": {
							"sysvinit": {
								"mysqld": {
									"enabled": "true",
									"ensureRunning": "false"
								},
								"nginx": {
									"enabled": "true",
									"ensureRunning": "false",
									"files": [
										"/etc/nginx/conf.d/default.conf"
									]
								},
								"cfn-hup": {
									"enabled": "true",
									"ensureRunning": "false",
									"files": [
										"/etc/cfn/cfn-hup.conf",
										"/etc/cfn/hooks.d/cfn-auto-reloader.conf"
									]
								},
                "uwsgi": {
									"enabled": "true",
									"ensureRunning": "true"
								}
							}
						}
					},
					"Configure": {
						"commands": {
						}
					}
				}
			},
			"Properties": {
				"ImageId": {
					"Fn::FindInMap": [
						"AWSRegionArch2AMI",
						{
							"Ref": "AWS::Region"
						},
						{
							"Fn::FindInMap": [
								"AWSInstanceType2Arch",
								{
									"Ref": "InstanceType"
								},
								"Arch"
							]
						}
					]
				},
				"InstanceType": {
					"Ref": "InstanceType"
				},
				"SecurityGroups": [
					{
						"Ref": "WebServerSecurityGroup"
					}
				],
				"KeyName": {
					"Ref": "KeyName"
				},
				"UserData": {
					"Fn::Base64": {
						"Fn::Join": [
							"",
							[
								"#!/bin/bash -xe\n",
								"yum update -y aws-cfn-bootstrap\n",
								"# Install the files and packages from the metadata\n",
								"/opt/aws/bin/cfn-init -v ",
								"         --stack ",
								{
									"Ref": "AWS::StackName"
								},
								"         --resource WebServerInstance ",
								"         --configsets InstallAndRun ",
								"         --region ",
								{
									"Ref": "AWS::Region"
								},
								"\n",
								"## Nginx setup\n",
								
								"# Signal the status from cfn-init\n",
								"/opt/aws/bin/cfn-signal -e $? ",
								"         --stack ",
								{
									"Ref": "AWS::StackName"
								},
								"         --resource WebServerInstance ",
								"         --region ",
								{
									"Ref": "AWS::Region"
								},
								"\n",
                "pip install uwsgi\n"
							]
						]
					}
				}
			},
			"CreationPolicy": {
				"ResourceSignal": {
					"Timeout": "PT5M"
				}
			}
		},
		"WebServerSecurityGroup": {
			"Type": "AWS::EC2::SecurityGroup",
			"Properties": {
				"GroupDescription": "Enable HTTP access via port 80",
				"SecurityGroupIngress": [
					{
						"IpProtocol": "tcp",
						"FromPort": "80",
						"ToPort": "80",
						"CidrIp": "0.0.0.0/0"
					},
					{
						"IpProtocol": "tcp",
						"FromPort": "22",
						"ToPort": "22",
						"CidrIp": "0.0.0.0/0"
					}
				]
			}
		}
    
	},
	"Outputs": {
		"WebsiteURL": {
			"Description": "URL for newly created server",
			"Value": {
				"Fn::Join": [
					"",
					[
						"http://",
						{
							"Fn::GetAtt": [
								"WebServerInstance",
								"PublicDnsName"
							]
						}
					]
				]
			}
		}
	}
}