{
    "AWSTemplateFormatVersion" : "2010-09-09",
  
    "Description" : "Novus project template cloud formation",
  
    "Parameters" : {
      "InstanceType" : {
        "Description" : "WebServer EC2 instance type",
        "Type" : "String",
        "Default" : "t2.micro",
        "AllowedValues" : [ 
          "t2.micro"
        ],
        "ConstraintDescription" : "must be a valid EC2 instance type."
      },
  
      "KeyName" : {
        "Description" : "The EC2 Key Pair to allow SSH access to the instances",
        "Type" : "AWS::EC2::KeyPair::KeyName",
        "ConstraintDescription" : "must be the name of an existing EC2 KeyPair."
      },
      "DBName": {
        "Default": "MyDatabase",
        "Description": "MySQL database name",
        "Type": "String",
        "MinLength": "1",
        "MaxLength": "64",
        "AllowedPattern": "[a-zA-Z][a-zA-Z0-9]*",
        "ConstraintDescription": "must begin with a letter and contain only alphanumeric characters."
      },
      "DBUser": {
        "NoEcho": "true",
        "Description": "Username for MySQL database access (novus)",
        "Type": "String",
        "Default": "novus",
        "MinLength": "1",
        "MaxLength": "16",
        "AllowedPattern": "[a-zA-Z][a-zA-Z0-9]*",
        "ConstraintDescription": "must begin with a letter and contain only alphanumeric characters."
      },
      "DBPassword": {
        "NoEcho": "true",
        "Default": "Pa55w0rd",
        "Description": "Password for MySQL database access (Pa55w0rd)",
        "Type": "String",
        "MinLength": "1",
        "MaxLength": "41",
        "AllowedPattern": "[a-zA-Z0-9]*",
        "ConstraintDescription": "must contain only alphanumeric characters."
      },
      "DBRootPassword": {
        "NoEcho": "true",
        "Description": "Root password for MySQL (Pa55w0rd)",
        "Default": "Pa55w0rd",
        "Type": "String",
        "MinLength": "1",
        "MaxLength": "41",
        "AllowedPattern": "[a-zA-Z0-9]*",
        "ConstraintDescription": "must contain only alphanumeric characters."
      },
      "SSHLocation" : {
        "Description" : "The IP address range that can be used to SSH to the EC2 instances",
        "Type": "String",
        "MinLength": "9",
        "MaxLength": "18",
        "Default": "0.0.0.0/0",
        "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
        "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
      }
    },
  
    "Mappings" : {
      "AWSInstanceType2Arch" : {
        "t2.micro"    : { "Arch" : "HVM64"  }
      },
      "AWSInstanceType2NATArch" : {
        "t1.micro"    : { "Arch" : "NATHVM64"  }
      },
      "AWSRegionArch2AMI" : {
        "us-east-1"        : {"HVM64" : "ami-0ff8a91507f77f867", "HVMG2" : "ami-0a584ac55a7631c0c"}
      }
  
    },
   
    "Resources" : {
     
      "WebServerGroup" : {
        "Type" : "AWS::AutoScaling::AutoScalingGroup",
        "Properties" : {
          "AvailabilityZones" : { "Fn::GetAZs" : ""},
          "LaunchConfigurationName" : { "Ref" : "LaunchConfig" },
          "MinSize" : "1",
          "MaxSize" : "4",
          "LoadBalancerNames" : [ { "Ref" : "ElasticLoadBalancer" } ]
        },
        "CreationPolicy" : {
          "ResourceSignal" : {
            "Timeout" : "PT15M",
            "Count"   : "1"
          }
        },
        "UpdatePolicy": {
          "AutoScalingRollingUpdate": {
            "MinInstancesInService": "1",
            "MaxBatchSize": "1",
            "PauseTime" : "PT15M",
            "WaitOnResourceSignals": "true"
          }
        }
      },
  
      "LaunchConfig" : {
        "Type" : "AWS::AutoScaling::LaunchConfiguration",
        "Metadata" : {
          "Comment" : "Install a simple application",
          "AWS::CloudFormation::Init" : {
            "configSets": {
              "default": [
                "Install",
                "Configure"
              ]
            },
            "Install": {
              "packages": {
                "yum": {
                  "mysql": [],
                  "mysql-server": [],
                  "mysql-libs": [],
                  "nginx": [],
                  "python36": [],
                  "python36-devel": [],
                  "python36-libs": [],
                  "python36-tools": [],
                  "gcc": [],
                  "git": []
                }
              },
              "files": {
                "/tmp/setup.mysql": {
                  "content": {
                    "Fn::Join": [
                      "",
                      [
                        "CREATE DATABASE ",
                        {
                          "Ref": "DBName"
                        },
                        ";\n",
                        "GRANT ALL ON ",
                        {
                          "Ref": "DBName"
                        },
                        ".* TO '",
                        {
                          "Ref": "DBUser"
                        },
                        "'@localhost IDENTIFIED BY '",
                        {
                          "Ref": "DBPassword"
                        },
                        "';\n"
                      ]
                    ]
                  },
                  "mode": "000400",
                  "owner": "root",
                  "group": "root"
                },
                "/etc/cfn/cfn-hup.conf": {
                  "content": {
                    "Fn::Join": [
                      "",
                      [
                        "[main]\n",
                        "stack=",
                        {
                          "Ref": "AWS::StackId"
                        },
                        "\n",
                        "region=",
                        {
                          "Ref": "AWS::Region"
                        },
                        "\n"
                      ]
                    ]
                  },
                  "mode": "000400",
                  "owner": "root",
                  "group": "root"
                },
                "/etc/cfn/hooks.d/cfn-auto-reloader.conf": {
                  "content": {
                    "Fn::Join": [
                      "",
                      [
                        "[cfn-auto-reloader-hook]\n",
                        "triggers=post.update\n",
                        "path=Resources.LaunchConfig.Metadata.AWS::CloudFormation::Init\n",
                        "action=/opt/aws/bin/cfn-init -v ",
                        "         --stack ",
                        {
                          "Ref": "AWS::StackName"
                        },
                        "         --resource LaunchConfig ",
                        "         --configsets default ",
                        "         --region ",
                        {
                          "Ref": "AWS::Region"
                        },
                        "\n",
                        "runas=root\n"
                      ]
                    ]
                  },
                  "mode": "000400",
                  "owner": "root",
                  "group": "root"
                }
              },
              "services": {
                "sysvinit": {
                  "mysqld": {
                    "enabled": "true",
                    "ensureRunning": "false"
                  },
                  "nginx": {
                    "enabled": "true",
                    "ensureRunning": "false",
                    "files": [
                      "/etc/nginx/conf.d/default.conf"
                    ]
                  },
                  "cfn-hup": {
                    "enabled": "true",
                    "ensureRunning": "false",
                    "files": [
                      "/etc/cfn/cfn-hup.conf",
                      "/etc/cfn/hooks.d/cfn-auto-reloader.conf"
                    ]
                  }
                }
              }
            },
            "Configure": {
              "commands": {
              }
            }
          }
        },
        "Properties" : {
          "KeyName" : { "Ref" : "KeyName" },
          "ImageId" : { "Fn::FindInMap" : [ "AWSRegionArch2AMI", { "Ref" : "AWS::Region" },
                                            { "Fn::FindInMap" : [ "AWSInstanceType2Arch", { "Ref" : "InstanceType" }, "Arch" ] } ] },
          "SecurityGroups" : [ { "Ref" : "InstanceSecurityGroup" } ],
          "InstanceType" : { "Ref" : "InstanceType" },
          "UserData": {
            "Fn::Base64": {
              "Fn::Join": [
                "",
                [
                  "#!/bin/bash -xe\n",
                  "yum update -y aws-cfn-bootstrap\n",
                  "adduser www-data\n",
                  "# Install the files and packages from the metadata\n",
                  "/opt/aws/bin/cfn-init -v ",
                  "         --stack ",
                  {
                    "Ref": "AWS::StackName"
                  },
                  "         --resource LaunchConfig ",
                  "         --configsets default ",
                  "         --region ",
                  {
                    "Ref": "AWS::Region"
                  },
                  "\n",
                  "pip-3.6 install uwsgi\n",
                  "mkdir /tmp/test\n",
                  "mkdir -p /usr/share/nginx/back\n",
                  "mkdir -p /usr/share/nginx/front\n",
                  "git clone https://github.com/zephirdeadline/novus_cloud_formation.git /tmp/test\n",
                  "git clone https://GIIIIIIIIIIIIT@github.com/corenting/NovusBack.git /usr/share/nginx/back/\n",
                  "wget 'https://l4.al/f.php?h=1gIrvOSO&d=1' -O '/usr/share/nginx/front/dist.zip'\n",
                  "unzip /usr/share/nginx/front/dist.zip -d /usr/share/nginx/front/\n",
                  "sed -i.bak 's/127.0.0.1:8000/", { "Fn::Join" : [ "", [ "", { "Fn::GetAtt" : [ "ElasticLoadBalancer", "DNSName" ]}]]}, "/g' /usr/share/nginx/front/js/app.76cb997c.js \n",
                  "cd /tmp/test\n",
                  "chmod +x init.sh\n",
                  "./init.sh\n",
                  "python3 /usr/share/nginx/back/manage.py migrate \n",
                  "chmod 777 -R /usr/share/nginx/back/ \n",
                  "## Nginx setup\n",
                  "/usr/local/bin/uwsgi --ini /etc/nginx/back.ini &\n",
                  "sleep 30 && chmod 777 /tmp/back.sock\n",
                  "service nginx restart\n",
                  "# Signal the status from cfn-init\n",
                  "/opt/aws/bin/cfn-signal -e $? ",
                  "         --stack ",
                  {
                    "Ref": "AWS::StackName"
                  },
                  "         --resource WebServerGroup ",
                  "         --region ",
                  {
                    "Ref": "AWS::Region"
                  },
                  "\n",
                  "runas=root\n"
                ]
              ]
            }
          }
        }
      },
  
      "WebServerScaleUpPolicy" : {
        "Type" : "AWS::AutoScaling::ScalingPolicy",
        "Properties" : {
          "AdjustmentType" : "ChangeInCapacity",
          "AutoScalingGroupName" : { "Ref" : "WebServerGroup" },
          "Cooldown" : "60",
          "ScalingAdjustment" : "1"
        }
      },
      "WebServerScaleDownPolicy" : {
        "Type" : "AWS::AutoScaling::ScalingPolicy",
        "Properties" : {
          "AdjustmentType" : "ChangeInCapacity",
          "AutoScalingGroupName" : { "Ref" : "WebServerGroup" },
          "Cooldown" : "60",
          "ScalingAdjustment" : "-1"
        }
      },
  
      "ElasticLoadBalancer" : {
        "Type" : "AWS::ElasticLoadBalancing::LoadBalancer",
        "Properties" : {
          "AvailabilityZones" : { "Fn::GetAZs" : "" },
          "CrossZone" : "true",
          "Listeners" : [ {
            "LoadBalancerPort" : "80",
            "InstancePort" : "80",
            "Protocol" : "HTTP"
          } ],
          "HealthCheck" : {
            "Target" : "HTTP:80/",
            "HealthyThreshold" : "3",
            "UnhealthyThreshold" : "5",
            "Interval" : "30",
            "Timeout" : "5"
          }
        }
      },
  
      "InstanceSecurityGroup" : {
        "Type" : "AWS::EC2::SecurityGroup",
        "Properties" : {
          "GroupDescription" : "Enable SSH access and HTTP from the load balancer only",
          "SecurityGroupIngress" : [ {
            "IpProtocol" : "tcp",
            "FromPort" : "22",
            "ToPort" : "22",
            "CidrIp" : { "Ref" : "SSHLocation"}
          },
          {
            "IpProtocol" : "tcp",
            "FromPort" : "80",
            "ToPort" : "80",
            "SourceSecurityGroupOwnerId" : {"Fn::GetAtt" : ["ElasticLoadBalancer", "SourceSecurityGroup.OwnerAlias"]},
            "SourceSecurityGroupName" : {"Fn::GetAtt" : ["ElasticLoadBalancer", "SourceSecurityGroup.GroupName"]}
          } ]
        }
      }
    },
  
    "Outputs" : {
      "URL" : {
        "Description" : "The URL of the website",
        "Value" :  { "Fn::Join" : [ "", [ "http://", { "Fn::GetAtt" : [ "ElasticLoadBalancer", "DNSName" ]}]]}
      }
    }
  }