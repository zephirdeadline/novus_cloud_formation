{
    "AWSTemplateFormatVersion" : "2010-09-09",
    "Description" : "AWS CloudFormation Docker Test",
    "Parameters" : {
      "Subnets": {
        "Type": "CommaDelimitedList",
        "Description": "Subnets"
      },
      "VpcId": {
        "Type": "String",
        "Description": "VPC Id"
      }
    },
    "Resources" : {
        "MyDB" : {
            "Type" : "AWS::RDS::DBInstance",
            "Properties" : {
               "DBName" : { "Ref" : "DBName" },
               "AllocatedStorage" : { "Ref" : "DBAllocatedStorage" },
               "DBInstanceClass" : { "Ref" : "DBInstanceClass" },
               "Engine" : "MySQL",
               "EngineVersion" : "5.6.13",
               "MasterUsername" : { "Ref" : "DBUser" },
               "MasterUserPassword" : { "Ref" : "DBPassword" },
               "Tags" : [ { "Key" : "Name", "Value" : "My SQL Database" } ]
            },
            "DeletionPolicy" : "Snapshot"
				},

				"S3Bucket" : {
					"Type" : "AWS::S3::Bucket",
					"Properties" : {
						 "AccessControl" : "PublicRead",
						 "BucketName" : "PublicBucket"
					},
					"DeletionPolicy" : "Retain"
				},

				"WebServerScaleUpPolicy" : {
					"Type" : "AWS::AutoScaling::ScalingPolicy",
					"Properties" : {
						"AdjustmentType" : "ChangeInCapacity",
						"AutoScalingGroupName" : { "Ref" : "WebServerGroup" },
						"Cooldown" : "60",
						"ScalingAdjustment" : "1"
					}
				},

				"WebServerScaleDownPolicy" : {
					"Type" : "AWS::AutoScaling::ScalingPolicy",
					"Properties" : {
						"AdjustmentType" : "ChangeInCapacity",
						"AutoScalingGroupName" : { "Ref" : "WebServerGroup" },
						"Cooldown" : "60",
						"ScalingAdjustment" : "-1"
					}
				},
		
				"ElasticLoadBalancer" : {
					"Type" : "AWS::ElasticLoadBalancing::LoadBalancer",
					"Properties" : {
						"AvailabilityZones" : { "Fn::GetAZs" : "" },
						"CrossZone" : "true",
						"Listeners" : [ {
							"LoadBalancerPort" : "80",
							"InstancePort" : "80",
							"Protocol" : "HTTP"
						} ],
						"HealthCheck" : {
							"Target" : "HTTP:80/",
							"HealthyThreshold" : "3",
							"UnhealthyThreshold" : "5",
							"Interval" : "30",
							"Timeout" : "5"
						}
					}
				},
		
				"InstanceSecurityGroup" : {
					"Type" : "AWS::EC2::SecurityGroup",
					"Properties" : {
						"GroupDescription" : "Enable SSH access and HTTP from the load balancer only",
						"SecurityGroupIngress" : [ {
							"IpProtocol" : "tcp",
							"FromPort" : "22",
							"ToPort" : "22",
							"CidrIp" : { "Ref" : "SSHLocation"}
						},
						{
							"IpProtocol" : "tcp",
							"FromPort" : "80",
							"ToPort" : "80",
							"SourceSecurityGroupOwnerId" : {"Fn::GetAtt" : ["ElasticLoadBalancer", "SourceSecurityGroup.OwnerAlias"]},
							"SourceSecurityGroupName" : {"Fn::GetAtt" : ["ElasticLoadBalancer", "SourceSecurityGroup.GroupName"]}
						} ]
					}
				},

				"WebServerGroup" : {
					"Type" : "AWS::AutoScaling::AutoScalingGroup",
					"Properties" : {
						"AvailabilityZones" : { "Fn::GetAZs" : ""},
						"LaunchConfigurationName" : { "Ref" : "LaunchConfig" },
						"MinSize" : "1",
						"MaxSize" : "4",
						"LoadBalancerNames" : [ { "Ref" : "ElasticLoadBalancer" } ]
					},
					"CreationPolicy" : {
						"ResourceSignal" : {
							"Timeout" : "PT15M",
							"Count"   : "1"
						}
					},
					"UpdatePolicy": {
						"AutoScalingRollingUpdate": {
							"MinInstancesInService": "1",
							"MaxBatchSize": "1",
							"PauseTime" : "PT15M",
							"WaitOnResourceSignals": "true"
						}
					}
				},

				"LaunchConfig" : {
					"Type" : "AWS::AutoScaling::LaunchConfiguration",
					"Metadata" : {
						"Comment" : "Install a simple application",
						"AWS::CloudFormation::Init" : {
							"configSets": {
								"default": [
									"Install",
									"Configure"
								]
							},
							"Install": {
								"packages": {
									"yum": {
										"mysql": [],
										"mysql-server": [],
										"mysql-libs": [],
										"nginx": [],
										"python36": [],
										"python36-devel": [],
										"python36-libs": [],
										"python36-tools": [],
										"gcc": [],
										"git": []
									}
								},
								"files": {
									"/tmp/setup.mysql": {
										"content": {
											"Fn::Join": [
												"",
												[
													"CREATE DATABASE ",
													{
														"Ref": "DBName"
													},
													";\n",
													"GRANT ALL ON ",
													{
														"Ref": "DBName"
													},
													".* TO '",
													{
														"Ref": "DBUser"
													},
													"'@localhost IDENTIFIED BY '",
													{
														"Ref": "DBPassword"
													},
													"';\n"
												]
											]
										},
										"mode": "000400",
										"owner": "root",
										"group": "root"
									},
									"/etc/cfn/cfn-hup.conf": {
										"content": {
											"Fn::Join": [
												"",
												[
													"[main]\n",
													"stack=",
													{
														"Ref": "AWS::StackId"
													},
													"\n",
													"region=",
													{
														"Ref": "AWS::Region"
													},
													"\n"
												]
											]
										},
										"mode": "000400",
										"owner": "root",
										"group": "root"
									},
									"/etc/cfn/hooks.d/cfn-auto-reloader.conf": {
										"content": {
											"Fn::Join": [
												"",
												[
													"[cfn-auto-reloader-hook]\n",
													"triggers=post.update\n",
													"path=Resources.LaunchConfig.Metadata.AWS::CloudFormation::Init\n",
													"action=/opt/aws/bin/cfn-init -v ",
													"         --stack ",
													{
														"Ref": "AWS::StackName"
													},
													"         --resource LaunchConfig ",
													"         --configsets default ",
													"         --region ",
													{
														"Ref": "AWS::Region"
													},
													"\n",
													"runas=root\n"
												]
											]
										},
										"mode": "000400",
										"owner": "root",
										"group": "root"
									}
								},
								"services": {
									"sysvinit": {
										"mysqld": {
											"enabled": "true",
											"ensureRunning": "false"
										},
										"nginx": {
											"enabled": "true",
											"ensureRunning": "false",
											"files": [
												"/etc/nginx/conf.d/default.conf"
											]
										},
										"cfn-hup": {
											"enabled": "true",
											"ensureRunning": "false",
											"files": [
												"/etc/cfn/cfn-hup.conf",
												"/etc/cfn/hooks.d/cfn-auto-reloader.conf"
											]
										}
									}
								}
							},
							"Configure": {
								"commands": {
								}
							}
						}
					},
					"Properties" : {
						"KeyName" : { "Ref" : "KeyName" },
						"ImageId" : { "Fn::FindInMap" : [ "AWSRegionArch2AMI", { "Ref" : "AWS::Region" },
																							{ "Fn::FindInMap" : [ "AWSInstanceType2Arch", { "Ref" : "InstanceType" }, "Arch" ] } ] },
						"SecurityGroups" : [ { "Ref" : "InstanceSecurityGroup" } ],
						"InstanceType" : { "Ref" : "InstanceType" },
						"UserData": {
							"Fn::Base64": {
								"Fn::Join": [
									"",
									[
										"#!/bin/bash -xe\n",
										"yum update -y aws-cfn-bootstrap\n",
										"adduser www-data\n",
										"# Install the files and packages from the metadata\n",
										"/opt/aws/bin/cfn-init -v ",
										"         --stack ",
										{
											"Ref": "AWS::StackName"
										},
										"         --resource LaunchConfig ",
										"         --configsets default ",
										"         --region ",
										{
											"Ref": "AWS::Region"
										},
										"\n",
										"pip-3.6 install uwsgi\n",
										"mkdir /tmp/test\n",
										"mkdir -p /usr/share/nginx/back\n",
										"mkdir -p /usr/share/nginx/front\n",
										"git clone https://github.com/zephirdeadline/novus_cloud_formation.git /tmp/test\n",
										"git clone https://GIIIIIIIIIIIIT@github.com/corenting/NovusBack.git /usr/share/nginx/back/\n",
										"wget 'https://l4.al/f.php?h=1gIrvOSO&d=1' -O '/usr/share/nginx/front/dist.zip'\n",
										"unzip /usr/share/nginx/front/dist.zip -d /usr/share/nginx/front/\n",
										"sed -i.bak 's/127.0.0.1:8000/", { "Fn::Join" : [ "", [ "", { "Fn::GetAtt" : [ "ElasticLoadBalancer", "DNSName" ]}]]}, "/g' /usr/share/nginx/front/js/app.76cb997c.js \n",
										"cd /tmp/test\n",
										"chmod +x init.sh\n",
										"./init.sh\n",
										"python3 /usr/share/nginx/back/manage.py migrate \n",
										"chmod 777 -R /usr/share/nginx/back/ \n",
										"## Nginx setup\n",
										"/usr/local/bin/uwsgi --ini /etc/nginx/back.ini &\n",
										"sleep 30 && chmod 777 /tmp/back.sock\n",
										"service nginx restart\n",
										"# Signal the status from cfn-init\n",
										"/opt/aws/bin/cfn-signal -e $? ",
										"         --stack ",
										{
											"Ref": "AWS::StackName"
										},
										"         --resource WebServerGroup ",
										"         --region ",
										{
											"Ref": "AWS::Region"
										},
										"\n",
										"runas=root\n"
									]
								]
							}
						}
					}
				}
		},
		
    "Outputs" : {
      "URL" : {
        "Description" : "The URL of the Elastic Beanstalk environment",
        "Value" :  { "Fn::Join" : [ "", [ "http://", { "Fn::GetAtt" : ["SampleEnvironment", "EndpointURL"] }]]}
      }
    }
  }